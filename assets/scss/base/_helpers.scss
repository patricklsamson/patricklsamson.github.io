@use "../abstracts" as *;
@use "sass:math" as m;

.cont,
.cont-fl {
  width: 100%;
  margin: 0 auto;
  padding: 0 20px;
}

@each $mq, $px in $cont-mqs {
  .cont {
    @include mq($mq) {
      padding: 0;
      max-width: m.round($px * 0.95);
    }
  }
}

.grid {
  margin: 0 -10px;

  @include clearfix;

  &.xgut {
    margin: 0;

    @include all(gcol-, in) {
      padding: 0;
    }
  }

  @include all(gcol-) {
    float: left;
    width: 100%;
    padding: 0 10px;
  }

  [class*="push-"],
  [class*="pull-"] {
    position: relative;
  }

  @for $i from 1 through 12 {
    $percentage: m.div($i * 100%, 12);

    .gcol-#{$i} {
      max-width: $percentage;
    }

    .push-#{$i} {
      left: $percentage;
    }

    .pull-#{$i} {
      right: $percentage;
    }
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      @for $i from 1 through 12 {
        $percentage: m.div($i * 100%, 12);

        .gcol-#{$class}-#{$i} {
          max-width: $percentage;
        }

        .#{$class}-push-#{$i} {
          left: $percentage;
        }

        .#{$class}-pull-#{$i} {
          right: $percentage;
        }
      }
    }
  }
}

.flex {
  @include flex;

  &.ftop {
    @include justify(f, start);
  }

  &.fbot {
    @include justify(f, end);
  }

  &.flft {
    @include align(i, f, start);
  }

  &.frgt {
    @include align(i, f, end);
  }
}

.rflex {
  @include flex(f);

  &.rftop {
    @include align(i, f, start);
  }

  &.rfbot {
    @include align(i, f, end);
  }

  &.rflft {
    @include justify(f, start);
  }

  &.rfrgt {
    @include justify(f, end);
  }
}

@each $mq, $class in $min-mqs {
  @include mq($mq) {
    .flex-#{$class} {
      @include flex;

      &.ftop-#{$class} {
        @include justify(f, start);
      }

      &.fbot-#{$class} {
        @include justify(f, end);
      }

      &.flft-#{$class} {
        @include align(i, f, start);
      }

      &.frgt-#{$class} {
        @include align(i, f, end);
      }
    }

    .rflex-#{$class} {
      @include flex(f);

      &.rftop-#{$class} {
        @include align(i, f, start);
      }

      &.rfbot-#{$class} {
        @include align(i, f, end);
      }

      &.rflft-#{$class} {
        @include justify(f, start);
      }

      &.rfrgt-#{$class} {
        @include justify(f, end);
      }
    }
  }
}

.grid-cont {
  @include prefix(
    (
      display: grid,
    ),
    ms,
    val
  );

  @include align(c);
  @include justify;

  &.gtop {
    @include align(c, f, start);
  }

  &.gbot {
    @include align(c, f, end);
  }

  &.glft {
    @include justify(f, start);
  }

  &.grgt {
    @include justify(f, end);
  }
}

.table {
  display: table;
  height: 100%;
  width: 100%;
  margin: 0 auto;

  &.ctr,
  &.lft,
  &.rgt {
    width: auto;
  }

  &.lft {
    margin-left: 0;
  }

  &.rgt {
    margin-right: 0;
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      &.ctr-#{$class},
      &.lft-#{$class},
      &.rgt-#{$class} {
        width: auto;
      }

      &.lft-#{$class} {
        margin-left: 0;
      }

      &.rgt-#{$class} {
        margin-right: 0;
      }
    }
  }

  .valign {
    display: table-cell;
    vertical-align: middle;

    &.top {
      vertical-align: top;
    }

    &.bot {
      vertical-align: bottom;
    }

    @each $mq, $class in $min-mqs {
      @include mq($mq) {
        &.top-#{$class} {
          vertical-align: top;
        }

        &.bot-#{$class} {
          vertical-align: bottom;
        }
      }
    }
  }
}

.img {
  @include img-prop(cover);

  &.prlax {
    @include mq(lgup) {
      background-attachment: fixed;
    }
  }

  &.con {
    @include img-prop(contain, f);
  }

  &.itop {
    @include img-pos(top);
  }

  &.ibot {
    @include img-pos(bottom);
  }

  &.ilft {
    @include img-pos(left);
  }

  &.irgt {
    @include img-pos(right);
  }

  &.ilt {
    @include img-pos(left top);
  }

  &.irt {
    @include img-pos(right top);
  }

  &.ilb {
    @include img-pos(left bottom);
  }

  &.irb {
    @include img-pos(right bottom);
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      &.con-#{$class} {
        @include img-prop(contain, f);
      }

      &.itop-#{$class} {
        @include img-pos(top);
      }

      &.ibot-#{$class} {
        @include img-pos(bottom);
      }

      &.ilft-#{$class} {
        @include img-pos(left);
      }

      &.irgt-#{$class} {
        @include img-pos(right);
      }

      &.ilt-#{$class} {
        @include img-pos(left top);
      }

      &.irt-#{$class} {
        @include img-pos(right top);
      }

      &.ilb-#{$class} {
        @include img-pos(left bottom);
      }

      &.irb-#{$class} {
        @include img-pos(right bottom);
      }
    }
  }
}

.talign {
  text-align: center;

  &.tlft {
    text-align: left;
  }

  &.trgt {
    text-align: right;
  }

  &.tjust {
    text-align: justify;
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      &.tlft-#{$class} {
        text-align: left;
      }

      &.trgt-#{$class} {
        text-align: right;
      }

      &.tjust-#{$class} {
        text-align: justify;
      }
    }
  }
}

.balign {
  display: block;
  margin-left: auto;
  margin-right: auto;

  &.blft {
    margin-left: 0;
  }

  &.brgt {
    margin-right: 0;
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      &.blft-#{$class} {
        margin-left: 0;
      }

      &.brgt-#{$class} {
        margin-right: 0;
      }
    }
  }
}

@each $class, $loc in $mg-auto {
  .m#{$class}-auto {
    margin#{$loc}: auto;
  }
}

@each $dual-loc, $first, $second in $dual-locs {
  .m#{$dual-loc}-auto {
    margin-#{$first}: auto;
    margin-#{$second}: auto;
  }
}

@each $class, $size in $mg-pd {
  .mg-#{$class} {
    margin: #{$size};
  }

  .pd-#{$class} {
    padding: #{$size};
  }

  @each $loc, $prop in $locs {
    .m#{$loc}-#{$class} {
      margin-#{$prop}: #{$size};
    }

    .p#{$loc}-#{$class} {
      padding-#{$prop}: #{$size};
    }
  }

  @each $dual-loc, $first, $second in $dual-locs {
    .m#{$dual-loc}-#{$class} {
      margin-#{$first}: #{$size};
      margin-#{$second}: #{$size};
    }

    .p#{$dual-loc}-#{$class} {
      padding-#{$first}: #{$size};
      padding-#{$second}: #{$size};
    }
  }
}

@each $mq, $size-class in $min-mqs {
  @include mq($mq) {
    @each $class, $loc in $mg-auto {
      .m#{$class}-#{$size-class}-auto {
        margin#{$loc}: auto;
      }
    }

    @each $dual-loc, $first, $second in $dual-locs {
      .m#{$dual-loc}-#{$size-class}-auto {
        margin-#{$first}: auto;
        margin-#{$second}: auto;
      }
    }

    @each $class, $size in $mg-pd {
      .mg-#{$size-class}-#{$class} {
        margin: #{$size};
      }

      .pd-#{$size-class}-#{$class} {
        padding: #{$size};
      }

      @each $loc, $prop in $locs {
        .m#{$loc}-#{$size-class}-#{$class} {
          margin-#{$prop}: #{$size};
        }

        .p#{$loc}-#{$size-class}-#{$class} {
          padding-#{$prop}: #{$size};
        }
      }

      @each $dual-loc, $first, $second in $dual-locs {
        .m#{$dual-loc}-#{$size-class}-#{$class} {
          margin-#{$first}: #{$size};
          margin-#{$second}: #{$size};
        }

        .p#{$dual-loc}-#{$size-class}-#{$class} {
          padding-#{$first}: #{$size};
          padding-#{$second}: #{$size};
        }
      }
    }
  }
}

.d-none {
  display: none;
}

.d-inblock {
  display: inline-block;
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    .d-none-#{$min-max-mq} {
      display: none;
    }

    .d-inblock-#{$min-max-mq} {
      display: inline-block;
    }
  }
}

.xbul {
  list-style: none;
  padding-left: 0;
}

.pd50 {
  padding: 50px 0;
}

.boxfx {
  @include prefix(
    (
      box-shadow: 0 10px 20px 0 $black-05,
    ),
    webkit moz
  );
}

.txtfx {
  text-shadow: 0 5px 10px $black-05;
}

.modal-open {
  position: fixed;
  overflow-y: hidden;
  width: 100%;
}

.vh-fluid {
  min-height: 100vh;
}

.vw-fluid {
  width: 100vw;
}

.w-fluid {
  width: 100%;
}

.x-scroll {
  overflow-x: scroll;
}

.y-scroll {
  overflow-y: scroll;
}

.p-relative {
  position: relative;
}

.p-absolute {
  position: absolute;

  @each $class, $size in $nmt {
    &.nmt-#{$class} {
      margin-top: $size;
    }
  }
}
