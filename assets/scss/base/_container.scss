@use "../abstracts" as *;
@use "sass:math" as m;

.cont,
.cont-fl {
  width: 100%;
  margin: 0 auto;
  padding-left: 20px;
  padding-right: 20px;
}

@each $mq, $px in $cont-mqs {
  .cont {
    @include mq($mq) {
      padding-left: 0;
      padding-right: 0;
      max-width: m.round($px * 0.95);
    }
  }
}

.grid {
  margin-left: -10px;
  margin-right: -10px;
  @include clearfix;

  &.gut-5 {
    margin-left: -5px;
    margin-right: -5px;

    @include all(gcol, in) {
      padding-left: 5px;
      padding-right: 5px;
    }
  }

  &.xgut {
    margin-left: 0;
    margin-right: 0;

    @include all(gcol, in) {
      padding-left: 0;
      padding-right: 0;
    }
  }

  @include all(gcol) {
    float: left;
    width: 100%;
  }

  [class*="push-"],
  [class*="pull-"] {
    position: relative;
  }

  @for $i from 1 through 12 {
    $percentage: m.div($i * 100%, 12);

    .gcol-#{$i} {
      max-width: $percentage;
    }

    .push-#{$i} {
      left: $percentage;
    }

    .pull-#{$i} {
      right: $percentage;
    }
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      @for $i from 1 through 12 {
        $percentage: m.div($i * 100%, 12);

        .gcol-#{$class}-#{$i} {
          max-width: $percentage;
        }

        .#{$class}-push-#{$i} {
          left: $percentage;
        }

        .#{$class}-pull-#{$i} {
          right: $percentage;
        }
      }
    }
  }
}

@include all(gcol) {
  padding-left: 10px;
  padding-right: 10px;
}

.flex {
  @include flex;
}

.flex-top {
  @include flex;
  @include justify(f);
}

.flex-bot {
  @include flex;
  @include justify(f, end);
}

.flex-lft {
  @include flex;
  @include align(i, f);
}

.flex-rgt {
  @include flex;
  @include align(i, f, end);
}

.flex-imp {
  @include flex(t, t);
}

.flex-top-imp {
  @include flex(t, t);
  @include justify(f, start, t);
}

.flex-bot-imp {
  @include flex(t, t);
  @include justify(f, end, t);
}

.flex-lft-imp {
  @include flex(t, t);
  @include align(i, f, start, t);
}

.flex-rgt-imp {
  @include flex(t, t);
  @include align(i, f, end, t);
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    .flex-#{$min-max-mq} {
      @include flex;
    }

    .flex-top-#{$min-max-mq} {
      @include flex;
      @include justify(f);
    }

    .flex-bot-#{$min-max-mq} {
      @include flex;
      @include justify(f, end);
    }

    .flex-lft-#{$min-max-mq} {
      @include flex;
      @include align(i, f);
    }

    .flex-rgt-#{$min-max-mq} {
      @include flex;
      @include align(i, f, end);
    }

    .flex-#{$min-max-mq}-imp {
      @include flex(t, t);
    }

    .flex-top-#{$min-max-mq}-imp {
      @include flex(t, t);
      @include justify(f, start, t);
    }

    .flex-bot-#{$min-max-mq}-imp {
      @include flex(t, t);
      @include justify(f, end, t);
    }

    .flex-lft-#{$min-max-mq}-imp {
      @include flex(t, t);
      @include align(i, f, start, t);
    }

    .flex-rgt-#{$min-max-mq}-imp {
      @include flex(t, t);
      @include align(i, f, end, t);
    }
  }
}

.rflex {
  @include flex(f);
}

.rflex-top {
  @include flex(f);
  @include align(i, f);
}

.rflex-bot {
  @include flex(f);
  @include align(i, f, end);
}

.rflex-lft {
  @include flex(f);
  @include justify(f);
}

.rflex-rgt {
  @include flex(f);
  @include justify(f, end);
}

.rflex-imp {
  @include flex(f, t);
}

.rflex-top-imp {
  @include flex(f, t);
  @include align(i, f, start, t);
}

.rflex-bot-imp {
  @include flex(f, t);
  @include align(i, f, end, t);
}

.rflex-lft-imp {
  @include flex(f, t);
  @include justify(f, start, t);
}

.rflex-rgt-imp {
  @include flex(f, t);
  @include justify(f, end, t);
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    .rflex-#{$min-max-mq} {
      @include flex(f);
    }

    .rflex-top-#{$min-max-mq} {
      @include flex(f);
      @include align(i, f);
    }

    .rflex-bot-#{$min-max-mq} {
      @include flex(f);
      @include align(i, f, end);
    }

    .rflex-lft-#{$min-max-mq} {
      @include flex(f);
      @include justify(f);
    }

    .rflex-rgt-#{$min-max-mq} {
      @include flex(f);
      @include justify(f, end);
    }

    .rflex-#{$min-max-mq}-imp {
      @include flex(f, t);
    }

    .rflex-top-#{$min-max-mq}-imp {
      @include flex(f, t);
      @include align(i, f, start, t);
    }

    .rflex-bot-#{$min-max-mq}-imp {
      @include flex(f, t);
      @include align(i, f, end, t);
    }

    .rflex-lft-#{$min-max-mq}-imp {
      @include flex(f, t);
      @include justify(f, start, t);
    }

    .rflex-rgt-#{$min-max-mq}-imp {
      @include flex(f, t);
      @include justify(f, end, t);
    }
  }
}

.grid-cont {
  @include prefix(
    (
      display: grid,
    ),
    ms,
    f
  );

  @include align(c);
  @include justify;

  &.gtop {
    @include align(c, f);
  }

  &.gbot {
    @include align(c, f, end);
  }

  &.glft {
    @include justify(f);
  }

  &.grgt {
    @include justify(f, end);
  }
}

.table {
  display: table;
  height: 100%;
  width: auto;
  margin: 0 auto;

  &.lft {
    margin-left: 0;
  }

  &.rgt {
    margin-right: 0;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.ctr-#{$min-max-mq},
      &.lft-#{$min-max-mq},
      &.rgt-#{$min-max-mq} {
        width: auto;
      }

      &.lft-#{$min-max-mq} {
        margin-left: 0;
      }

      &.rgt-#{$min-max-mq} {
        margin-right: 0;
      }
    }
  }

  & > .valign {
    display: table-cell;
  }
}

.table-imp {
  display: table !important;
  height: 100% !important;
  width: auto !important;
  margin: 0 auto !important;

  &.lft-imp {
    margin-left: 0 !important;
  }

  &.rgt-imp {
    margin-right: 0 !important;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.ctr-#{$min-max-mq}-imp,
      &.lft-#{$min-max-mq}-imp,
      &.rgt-#{$min-max-mq}-imp {
        width: auto !important;
      }

      &.lft-#{$min-max-mq}-imp {
        margin-left: 0 !important;
      }

      &.rgt-#{$min-max-mq}-imp {
        margin-right: 0 !important;
      }
    }
  }

  & > .valign-imp {
    display: table-cell !important;
  }
}

.valign {
  vertical-align: middle;

  &.top {
    vertical-align: top;
  }

  &.bot {
    vertical-align: bottom;
  }

  &.t-top {
    vertical-align: text-top;
  }

  &.t-bot {
    vertical-align: text-bottom;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.top-#{$min-max-mq} {
        vertical-align: top;
      }

      &.bot-#{$min-max-mq} {
        vertical-align: bottom;
      }

      &.t-top-#{$min-max-mq} {
        vertical-align: text-top;
      }

      &.t-bot-#{$min-max-mq} {
        vertical-align: text-bottom;
      }
    }
  }
}

.valign-imp {
  vertical-align: middle !important;

  &.top-imp {
    vertical-align: top !important;
  }

  &.bot-imp {
    vertical-align: bottom !important;
  }

  &.t-top-imp {
    vertical-align: text-top !important;
  }

  &.t-bot-imp {
    vertical-align: text-bottom !important;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.top-#{$min-max-mq}-imp {
        vertical-align: top !important;
      }

      &.bot-#{$min-max-mq}-imp {
        vertical-align: bottom !important;
      }

      &.t-top-#{$min-max-mq}-imp {
        vertical-align: text-top !important;
      }

      &.t-bot-#{$min-max-mq}-imp {
        vertical-align: text-bottom !important;
      }
    }
  }
}

@each $span, $prop, $dim in $fluids {
  .#{$span}-fluid {
    #{$prop}: $dim;
  }

  .#{$span}-fluid-imp {
    #{$prop}: $dim !important;
  }
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    @each $span, $prop, $dim in $fluids {
      .#{$span}-fluid-#{$min-max-mq} {
        #{$prop}: $dim;
      }
    }

    @each $span, $prop, $dim in $fluids {
      .#{$span}-fluid-#{$min-max-mq}-imp {
        #{$prop}: $dim !important;
      }
    }
  }
}

.vwh-fluid {
  width: 100vw;
  min-height: 100vh;
}

.wh-fluid {
  width: 100%;
  height: 100%;
}

.vwh-fluid-imp {
  width: 100vw !important;
  min-height: 100vh !important;
}

.wh-fluid-imp {
  width: 100% !important;
  height: 100% !important;
}

@each $xy in $xys {
  @each $scroll-hidden in $scroll-hiddens {
    .#{$xy}-#{$scroll-hidden} {
      overflow-#{$xy}: $scroll-hidden;
    }

    .#{$xy}-#{$scroll-hidden} {
      overflow-#{$xy}: $scroll-hidden !important;
    }
  }
}

main.main-document {
  overflow-x: hidden;
  background: $dgray;

  @include mq(lg) {
    overflow-x: scroll;
  }

  @media print {
    background: transparent;
  }

  @for $i from 1 through 6 {
    h#{$i} {
      margin-bottom: calc(2pt * #{$multiplier});
    }
  }

  header,
  footer,
  section {
    margin-bottom: calc(5pt * #{$multiplier});
  }

  li,
  p {
    margin-bottom: calc(2pt * #{$multiplier});
  }

  .wrap-paper {
    position: relative;
    overflow: hidden;
    background: #fff;
    display: none;
    @include paper(8.5, 11, 0.25);

    &.active {
      display: block;
    }
  }
}

.boxfx {
  @include prefix(
    (
      box-shadow: 0 10px 20px 10px $black-05
    ),
    webkit moz
  );
}

.boxfx-white {
  @include prefix(
    (
      box-shadow: 0 0 4px 2px $white
    ),
    webkit moz
  );
}

.wrap-portfolio {
  border: 5px solid $cyan-04;
  background: transparent;
  height: 20vh;
  color: $white;

  @include prefix(
    (
      perspective: 1000px
    ),
    webkit moz
  );

  &:hover {
    .wrap-portfolio-inner {
      @include prefix(
        (
          transform: rotateY(180deg),
        ),
        webkit moz ms o
      );
    }
  }

  @include mq(lgup) {
    width: 30vw;
  }

  @include mq(lg) {
    width: 40vw;
  }

  @include mq(md) {
    width: 70vw;
  }

  @include mq(xxs) {
    height: 200px;
    width: 100%;
  }

  .wrap-portfolio-inner {
    @include tran(transform, 0.8s);

    @include prefix(
      (
        transform-style: preserve-3d
      ),
      webkit moz
    );

    .wrap-portfolio-inner-front,
    .wrap-portfolio-inner-back {
      @include prefix(
        (
          backface-visibility: hidden
        ),
        webkit moz
      );
    }

    .wrap-portfolio-inner-back {
      @include prefix(
        (
          transform: rotateY(180deg)
        ),
        webkit moz ms o
      );

      @include all(wrap-dgray) {
        height: 100%;

        a {
          color: $white;
        }
      }
    }
  }
}

.wrap-experience {
  color: $white;

  p:first-child {
    position: relative;

    &:after {
      display: none;
    }

    @include fa(f126, fas, before) {
      position: absolute;
      margin-left: -2rem;
      font-size: 2.75rem;
    }
  }

  @include mq(md) {
    border-left: 5px solid $cyan-04;
  }

  &.order-1 {
    @include mq(lgup) {
      border-right: 2.5px solid $cyan-04;

      @include order(1);

      p:first-child {
        position: relative;
        text-align: right;

        &:before {
          display: none;
        }

        @include fa(f126) {
          position: absolute;
          font-size: 2.75rem;

          @include prefix(
            (
              transform: scaleX(-1),
            ),
            webkit moz ms o
          );
        }
      }
    }
  }

  &.order-2 {
    @include mq(lgup) {
      border-left: 2.5px solid $cyan-04;

      @include order(2);
    }
  }

  &.empty {
    @include mq(md) {
      border: none;
    }
  }
}

.wrap-gray {
  @include prefix(
    (
      background: linear-gradient($gray-06, $lgray 50%)
    ),
    webkit moz o,
    f
  ) {
    background: -webkit-gradient(
      linear,
      left top,
      left bottom,
      from($gray-06),
      color-stop(50%, $lgray)
    );
  }
}

.wrap-dgray {
  background: $dgray2;
}

.wrap-dgray06 {
  @include prefix(
    (
      background: linear-gradient($dgray-06, $gray-06)
    ),
    webkit moz o,
    f
  ) {
    background: -webkit-gradient(
      linear,
      left top,
      left bottom,
      from($dgray-06),
      to($gray-06)
    );
  }
}

.wrap-dgray08 {
  background: $dgray-08;
}

.wrap-dgray09 {
  background: $dgray-09;
}

.wrap-white {
  background: $white-08;
}

.wrap-dcyan {
  background: $dcyan;
}


.wrap-blue {
  position: relative;
  z-index: z("wrap-blue");
  border: 3px solid $dblue;
  border-radius: 3px;
  background: $lblue;
  list-style: none;
  padding: 5px;

  &.dblue {
    border-color: $dblue2;
    background: $dblue;
    color: $white;
  }

  &.blue-bar {
    background: $dblue;
    padding: 5px;
    color: $white;

    img,
    .img {
      width: 50px;
      height: 50px;
    }
  }

  &.bg-gradient {
    @include prefix(
      (
        background: linear-gradient($lblue, $dblue),
      ),
      webkit moz o,
      f
    ) {
      background: -webkit-gradient(
        linear,
        left top,
        left bottom,
        from($lblue),
        to($dblue)
      );
    }
  }

  &.img-bd-dark {
    img {
      border-color: $dblue;
    }
  }

  img,
  .img,
  .svg {
    border: 3px solid $lblue2;

    @include prefix(
      (
        border-radius: 5px,
      ),
      webkit moz
    );
  }

  .svg {
    width: 50px;
    vertical-align: middle;
    padding: 5px;

    path {
      fill: $white;
    }
  }

  .fa-square {
    color: $dblue;
  }
}

.wrap-division {
  @include all(gcol) {
    &:nth-child(odd) {
      padding-top: 15px;
    }

    &:nth-child(even) {
      border-left: 10px double $dblue;
    }
  }
}

.parallelogram {
  @include parallelogram(-35);
}
