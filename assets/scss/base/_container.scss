@use "../abstracts" as *;
@use "sass:math" as m;

.cont,
.cont-fl {
  width: 100%;
  margin: 0 auto;
  padding-left: 20px;
  padding-right: 20px;
}

@each $mq, $px in $cont-mqs {
  .cont {
    @include mq($mq) {
      padding-left: 0;
      padding-right: 0;
      max-width: m.round($px * 0.95);
    }
  }
}

.grid {
  margin-left: -10px;
  margin-right: -10px;

  @include clearfix;

  &.xgut {
    margin-left: 0;
    margin-right: 0;

    @include all(gcol, in) {
      padding-left: 0;
      padding-right: 0;
    }
  }

  @include all(gcol) {
    float: left;
    width: 100%;
  }

  [class*="push-"],
  [class*="pull-"] {
    position: relative;
  }

  @for $i from 1 through 12 {
    $percentage: m.div($i * 100%, 12);

    .gcol-#{$i} {
      max-width: $percentage;
    }

    .push-#{$i} {
      left: $percentage;
    }

    .pull-#{$i} {
      right: $percentage;
    }
  }

  @each $mq, $class in $min-mqs {
    @include mq($mq) {
      @for $i from 1 through 12 {
        $percentage: m.div($i * 100%, 12);

        .gcol-#{$class}-#{$i} {
          max-width: $percentage;
        }

        .#{$class}-push-#{$i} {
          left: $percentage;
        }

        .#{$class}-pull-#{$i} {
          right: $percentage;
        }
      }
    }
  }
}

@include all(gcol) {
  padding-left: 10px;
  padding-right: 10px;
}

.flex {
  @include flex;

  &.ftop {
    @include justify(f);
  }

  &.fbot {
    @include justify(f, end);
  }

  &.flft {
    @include align(i, f);
  }

  &.frgt {
    @include align(i, f, end);
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.ftop-#{$min-max-mq} {
        @include justify(f);
      }

      &.fbot-#{$min-max-mq} {
        @include justify(f, end);
      }

      &.flft-#{$min-max-mq} {
        @include align(i, f);
      }

      &.frgt-#{$min-max-mq} {
        @include align(i, f, end);
      }
    }
  }
}

.rflex {
  @include flex(f);

  &.rftop {
    @include align(i, f);
  }

  &.rfbot {
    @include align(i, f, end);
  }

  &.rflft {
    @include justify(f);
  }

  &.rfrgt {
    @include justify(f, end);
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.rftop-#{$min-max-mq} {
        @include align(i, f);
      }

      &.rfbot-#{$min-max-mq} {
        @include align(i, f, end);
      }

      &.rflft-#{$min-max-mq} {
        @include justify(f);
      }

      &.rfrgt-#{$min-max-mq} {
        @include justify(f, end);
      }
    }
  }
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    .flex-#{$min-max-mq} {
      @include flex;
    }

    .rflex-#{$min-max-mq} {
      @include flex(f);
    }
  }
}

.grid-cont {
  @include prefix(
    (
      display: grid,
    ),
    ms,
    val
  );

  @include align(c);
  @include justify;

  &.gtop {
    @include align(c, f);
  }

  &.gbot {
    @include align(c, f, end);
  }

  &.glft {
    @include justify(f);
  }

  &.grgt {
    @include justify(f, end);
  }
}

.table {
  display: table;
  height: 100%;
  width: 100%;
  margin: 0 auto;

  &.ctr,
  &.lft,
  &.rgt {
    width: auto;
  }

  &.lft {
    margin-left: 0;
  }

  &.rgt {
    margin-right: 0;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.ctr-#{$min-max-mq},
      &.lft-#{$min-max-mq},
      &.rgt-#{$min-max-mq} {
        width: auto;
      }

      &.lft-#{$min-max-mq} {
        margin-left: 0;
      }

      &.rgt-#{$min-max-mq} {
        margin-right: 0;
      }
    }
  }

  & > .valign {
    display: table-cell;
  }
}

.valign {
  vertical-align: middle;

  &.top {
    vertical-align: top;
  }

  &.bot {
    vertical-align: bottom;
  }

  &.t-top {
    vertical-align: text-top;
  }

  &.t-bot {
    vertical-align: text-bottom;
  }

  @each $min-max-mq in $min-max-mqs {
    @include mq($min-max-mq) {
      &.top-#{$min-max-mq} {
        vertical-align: top;
      }

      &.bot-#{$min-max-mq} {
        vertical-align: bottom;
      }

      &.t-top-#{$min-max-mq} {
        vertical-align: text-top;
      }

      &.t-bot-#{$min-max-mq} {
        vertical-align: text-bottom;
      }
    }
  }
}

@each $span, $prop, $dim in $fluids {
  .#{$span}-fluid {
    #{$prop}: $dim;
  }
}

@each $min-max-mq in $min-max-mqs {
  @include mq($min-max-mq) {
    @each $span, $prop, $dim in $fluids {
      .#{$span}-fluid-#{$min-max-mq} {
        #{$prop}: $dim;
      }
    }
  }
}

.vwh-fluid {
  width: 100vw;
  min-height: 100vh;
}

.wh-fluid {
  width: 100%;
  height: 100%;
}

@each $xy in $xys {
  @each $scroll-hidden in $scroll-hiddens {
    .#{$xy}-#{$scroll-hidden} {
      overflow-#{$xy}: $scroll-hidden;
    }
  }
}

.boxfx {
  @include prefix(
    (
      box-shadow: 0 10px 20px 0 $black-05,
    ),
    webkit moz
  );
}

.wrap-portfolio {
  border: 5px solid $cyan-04;
  background: transparent;

  @include prefix(
    (
      perspective: 1000px,
    ),
    webkit moz
  );

  &:hover {
    .wrap-portfolio-inner {
      @include prefix(
        (
          transform: rotateY(180deg),
        ),
        webkit moz ms o
      );
    }
  }

  a {
    color: $white;

    &:hover {
      color: $white-04;
    }

    .wrap-portfolio-inner {
      @include tran(transform, 0.8s);

      @include prefix(
        (
          transform-style: preserve-3d,
        ),
        webkit moz
      );

      .wrap-portfolio-inner-front,
      .wrap-portfolio-inner-back {
        @include prefix(
          (
            backface-visibility: hidden,
          ),
          webkit moz
        );
      }

      .wrap-portfolio-inner-back {
        @include prefix(
          (
            transform: rotateY(180deg),
          ),
          webkit moz ms o
        );
      }
    }
  }
}

.wrap-dgray {
  background: $dgray2;
}

.wrap-dgray06 {
  background: $dgray-06;
}

.wrap-white {
  background: $white-08;
}

.wrap-cyan04 {
  background: $cyan-04;
}
